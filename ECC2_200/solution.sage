from sage.all import *

M = 93556643250795678718734474880013829509320385402690660619699653921022012489089
F = GF(M)
A = 66001598144012865876674115570268990806314506711104521036747533612798434904785
B = 25255205054024371783896605039267101837972419055969636393425590261926131199030
Px = F(56027910981442853390816693056740903416379421186644480759538594137486160388926)
Py = F(65533262933617146434438829354623658858649726233622196512439589744498050226926)
Qx = 61124499720410964164289905006830679547191538609778446060514645905829507254103
Qy = 2595146854028317060979753545310334521407008629091560515441729386088057610440

E = EllipticCurve(F, [A, B])

P = E(Px, Py)
Q = E(Qx, Qy)

_order = order(E)
factors = [f[0]*f[1] for f in factor(_order)]
l = [2, 1, 4, 1, 129, 224, 5729, 13993, 1730599, 4590572]

# Solves 10 of the discrete logs before crashing
# l = []

# # P*n = Q
# for factor in factors[:10]:
#     t = int(_order / factor)
#     tP = t*P
#     tQ = t*Q
#     for j in range(factor):
#         if j*tP == tQ:
#             print j*tP
#             l.append(j)
#             break
#     print l

n = crt(l, factors[:len(l)])
print n
assert P*n == Q

# vim: set ft=python:
